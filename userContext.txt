import { jwtDecode } from "jwt-decode";
import {
  addUserToDB,
  auth,
  collection,
  db,
  doc,
  getDoc,
  getDocs,
  onAuthStateChanged,
} from "../utils/firebase";
import { createContext, useEffect, useState } from "react";
// ==========================================
export const UserContext = createContext();
// USER CONTEXT PROVIDE
function UserContextProvider({ children }) {
  const [loader, setLoader] = useState(false);
  // setLoader(true);
  const token = localStorage.getItem("token");
  const [user, setUser] = useState(null);
  useEffect(() => {
    if (token) {
      const decoded = jwtDecode(token);
      setUser(decoded);
    }
  }, []);
  const [flagToResetCartItems, setFlagToResetCartItems] = useState(true);
  // useEffect(() => {
  //   const subscribe = onAuthStateChanged(auth, async (user) => {
  //     if (user) {
  //       const username = localStorage.getItem("username");
  // const docRef = doc(db, "Users", user.uid);
  // const collectionRef = collection(db, "Users");
  // let usersDataFromDB = await getDocs(collectionRef);
  // usersDataFromDB = usersDataFromDB.docs.map((doc) => {
  //   return doc.data();
  // });

  // let currentUser = usersDataFromDB.findIndex(
  //   (data) => data.email == user.email
  // );
  // console.log("currentUser =>", currentUser);
  let obj = {};

  // if (currentUser == -1) {
  //   const userData = await addUserToDB(username, user, docRef, navigate);
  //   obj = { isLogIn: true, ...userData };
  //   localStorage.setItem("username", null);
  // } else {
  //   obj = {
  //     ...usersDataFromDB[currentUser],
  //     isLogIn: true,
  //   };
  // }
  //   setUser(obj);
  //   localStorage.setItem("loggedInUser", JSON.stringify(obj));
  //   localStorage.setItem("userCart", obj?.userCart);
  //   localStorage.setItem("order", `deliverd${user.uid}`);
  // } else {
  //   localStorage.setItem("userCart", null);
  //   localStorage.setItem(
  //     "loggedInUser",
  //     JSON.stringify({ isLogIn: false })
  //   );
  //   localStorage.setItem("order", null);

  // flagToResetCartItems
  //   ? setFlagToResetCartItems(false)
  //   : setFlagToResetCartItems(true);
  console.log("user log in nhi hai");
  // console.log("USERDATA IN USERCONTEXT=>", loggedInUser);
  // }
  // setLoader(false);
  // });
  //   return () => {
  //     subscribe;
  //   };
  // }, []);

  return (
    <UserContext.Provider value={{ user, setUser, flagToResetCartItems }}>
      {children}
    </UserContext.Provider>
  );
}
export default UserContextProvider;
